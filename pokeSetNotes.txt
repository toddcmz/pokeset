### Dev notes ###

started with flask backend, mostly to hit API endpoints.
register new user
sign in
add new game score
retrieve game scores

got all of the above working, tested with insomnia.
was not working with token - would need help understanding
this piece.

pushed to render:
https://pokesetapi.onrender.com

Started setting up react front.

Made shells for sign in, register, landing, and play game.
Implemented auth context
Implemented register new user, this is working as expected,
elephant SQL updates properly. 

Switching from this over actual game functionality.

First goal is to access poke api and retrieve images,
then save them somehow in the app. I would think
we could save them in a useState object.

Let's first just try to access them and get them to 
display. So make a single form with a button and try
to get the pokemon in that form to come up.

Let's try taking from generation-iii, firered-leafgreen, front_default

with urls successfully retrieved, I can pass them as props inside
useState to the next page, I think, for rendering the game.

Okay, did eventually get all three chosen pokemon to render.
Boy is error handling going to be a problem.

I think next step is going to be forcing a consistent size, then trying
to generate a "card." I should try ot generate a 1, 2, and 3 pokemon
card using all three choices. I can do this in rows below the current
register button.

Succeeded. Now I need to generate a deck and lay out all the cards,
then work on being able to click on cards and do something
with the cards clicked.

Went to setting up gameboard spots first. made 4x3 grid of divs 
to be the game board. Idea is cards will be placed inside each div.


validate pokemon choices

send score to back end

see my scores

see all high scores


### WATCHING GAME TUTORIAL VIDEOS ###

React Game Tutorial - Build Tic Tac Toe Game
Coding with Basir
https://www.youtube.com/watch?v=2hw7bg-gNRA

he said that we're going to use position and top
on the .btn styling to create animation when
the user hovers over something.

note that this works with .btn:hover because
we're adjusting top by 4px, then subtracting those
4 px off of both shadow colors, with 12 to 8 on teh blue,
and 18 to 14 on the grey underneath. pretty cool.

now we're adding logic using Reducer in this application.

to manage the state of the game, we're going to use reducer.

net ninja Reducer:
pattern of coding which centralizes all of our methods
for changing state into a single function.

IF we have a big program, there might be a bunch of functions
that all change state. If we're having to pass all those functions
as props to our components that use them, then they all have to 
be passed separately. Instead, we could consolidate all those functions
into one reducer function.

This is just a coding pattern. You don't have to use them if you don't
want to.

First we have our reducer function. This interacts with our state and data.
Contains all of our state manipulation logic.

Then we have an action object that describes the type of change we want to make.

Finally we have a dispatch function that sends the action to the reducer.

We call the action, it gets dispatched to the reducer, and it makes the
change to the state.

First we make an action object which describes what we want to make.

	{type:'ADD_BOOK', book:{title=... author=...}} // this is the action

then we dispatch this to the reducer:

	reducer(action, state)

the reducer is going to check the type fo the action, then update the state
we've told it to update based on what it finds. 
-- checks action type
-- updates the state object
-- returns the state

in the above case, it would add a book to the appropriate state.

The syntax is a little complicated, but in essence we're just bunding
all the logic from our separate "state updater" methods and putting
them all into one big method. This is a bit surprising, I wouldn't think
this would jive well with oop ideologies, but hey.

Got into crazy complicated code with not the greatest structure IMO. moving on.



